<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ include file="Manager.ttinclude" #>
<#@ include file="config.ttinclude" #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#
	SqlConnection conn = new SqlConnection(myConnectionString);
	conn.Open();
	System.Data.DataTable schema = conn.GetSchema("TABLES");
	string selectQuery = "select * from @tableName";
	SqlCommand command = new SqlCommand(selectQuery,conn);
	SqlDataAdapter ad = new SqlDataAdapter(command);
	System.Data.DataSet ds = new DataSet();
	foreach(System.Data.DataRow row in schema.Rows)
	{
	ds.Tables.Clear();
	command.CommandText = selectQuery.Replace("@tableName",row["TABLE_NAME"].ToString());
	ad.FillSchema(ds, SchemaType.Mapped, row["TABLE_NAME"].ToString());
	manager.StartNewFile("DAL"+row["TABLE_NAME"].ToString().Trim()+".cs");
	#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using <#= myNameSpace#>.Model;
using System.Data;
using System.Data.SqlClient;

namespace <#= myNameSpace#>.DAL
{
	public class DAL<#= row["TABLE_NAME"].ToString().Trim()#> 
	{
		public bool Add<#= row["TABLE_NAME"].ToString().Trim()#>(<#= row["TABLE_NAME"].ToString().Trim()#> <#= row["TABLE_NAME"].ToString().Trim().Substring(0, 1).ToLower()+row["TABLE_NAME"].ToString().Trim().Substring(1)#>)
		{
			string sql = "INSERT INTO <#= row["TABLE_NAME"].ToString().Trim()#>(<#for(int i=1;i<ds.Tables[0].Columns.Count; i++)
		 //foreach (DataColumn dc in ds.Tables[0].Columns)
		{ #><#= ds.Tables[0].Columns[i].ColumnName #><# if(i!=ds.Tables[0].Columns.Count-1){ #>, <#} }  #>) VALUES(<#for(int i=1;i<ds.Tables[0].Columns.Count; i++)
		 //foreach (DataColumn dc in ds.Tables[0].Columns)
		{ #>@<#= ds.Tables[0].Columns[i].ColumnName #><# if(i!=ds.Tables[0].Columns.Count-1){ #>, <#} }  #>))";
			SqlParameter[] parameters = {
		<#for(int i=1;i<ds.Tables[0].Columns.Count; i++)
		 //foreach (DataColumn dc in ds.Tables[0].Columns)
{ #>								new SqlParameter("@<#= ds.Tables[0].Columns[i].ColumnName #>", SqlDbType.<#= ds.Tables[0].Columns[i].DataType.Name #><# if(ds.Tables[0].Columns[i].MaxLength != -1){#>, <#= ds.Tables[0].Columns[i].MaxLength #><#}#>)<# if(i!=ds.Tables[0].Columns.Count-1){ #>, 
		<#}} #>

                                        };
<#for(int i=1;i<ds.Tables[0].Columns.Count; i++)
		 //foreach (DataColumn dc in ds.Tables[0].Columns)
{ #>			parameters[<#= i-1#>].Value = <#= row["TABLE_NAME"].ToString().Trim().Substring(0, 1).ToLower()+row["TABLE_NAME"].ToString().Trim().Substring(1)#>.<#= ds.Tables[0].Columns[i].ColumnName  #>;
<#} #>
			int n = DBHelper.ExecuteCommand(sql, parameters);
			return n == 1;
		}


		public bool Delete<#= row["TABLE_NAME"].ToString().Trim()#>By<#= ds.Tables[0].Columns[0].ColumnName #>(int <#= ds.Tables[0].Columns[0].ColumnName.Substring(0,1).ToLower()+ds.Tables[0].Columns[0].ColumnName.Substring(1) #>)
		{
			string sql = "DELETE FROM <#= row["TABLE_NAME"].ToString().Trim()#> WHERE <#= ds.Tables[0].Columns[0].ColumnName #> = @<#= ds.Tables[0].Columns[0].ColumnName #>";
			SqlParameter parameter = new SqlParameter("@<#= ds.Tables[0].Columns[0].ColumnName #>", SqlDbType.<#= ds.Tables[0].Columns[0].DataType.Name #><# if(ds.Tables[0].Columns[0].MaxLength != -1){#>, <#= ds.Tables[0].Columns[0].MaxLength #><#}#>);
			parameter.Value = <#= ds.Tables[0].Columns[0].ColumnName.Substring(0,1).ToLower()+ds.Tables[0].Columns[0].ColumnName.Substring(1) #>;
			int n = DBHelper.ExecuteCommand(sql, parameter);
			return n == 1;
		}


		public bool Modify<#= row["TABLE_NAME"].ToString().Trim()#>(<#= row["TABLE_NAME"].ToString().Trim()#> <#= row["TABLE_NAME"].ToString().Trim().Substring(0, 1).ToLower()+row["TABLE_NAME"].ToString().Trim().Substring(1)#>)
		{
			string sql = "UPDATE <#= row["TABLE_NAME"].ToString().Trim()#> SET <# for(int i=1;i<ds.Tables[0].Columns.Count; i++)
		 //foreach (DataColumn dc in ds.Tables[0].Columns)
		{ #><#= ds.Tables[0].Columns[i].ColumnName #> = @<#= ds.Tables[0].Columns[i].ColumnName #><# if(i!=ds.Tables[0].Columns.Count-1){ #>, <#} }  #> WHERE <#= ds.Tables[0].Columns[0].ColumnName #> = @<#= ds.Tables[0].Columns[0].ColumnName #>";
			SqlParameter[] parameters = {
		<#for(int i=0;i<ds.Tables[0].Columns.Count; i++)
		 //foreach (DataColumn dc in ds.Tables[0].Columns)
{ #>								new SqlParameter("@<#= ds.Tables[0].Columns[i].ColumnName #>", SqlDbType.<#= ds.Tables[0].Columns[i].DataType.Name #><# if(ds.Tables[0].Columns[i].MaxLength != -1){#>, <#= ds.Tables[0].Columns[i].MaxLength #><#}#>)<# if(i!=ds.Tables[0].Columns.Count-1){ #>, 
		<#}} #>

                                        };
<#for(int i=0;i<ds.Tables[0].Columns.Count; i++)
		 //foreach (DataColumn dc in ds.Tables[0].Columns)
{ #>			parameters[<#= i#>].Value = <#= row["TABLE_NAME"].ToString().Trim().Substring(0, 1).ToLower()+row["TABLE_NAME"].ToString().Trim().Substring(1)#>.<#= ds.Tables[0].Columns[i].ColumnName  #>;
<#} #>
			int n = DBHelper.ExecuteCommand(sql, parameters);
			return n == 1;
		}

		public <#= row["TABLE_NAME"].ToString().Trim()#> Get<#= row["TABLE_NAME"].ToString().Trim()#>By<#= ds.Tables[0].Columns[0].ColumnName #>(int <#= ds.Tables[0].Columns[0].ColumnName.Substring(0,1).ToLower()+ds.Tables[0].Columns[0].ColumnName.Substring(1) #>)
		{
			<#= row["TABLE_NAME"].ToString().Trim()#> <#= row["TABLE_NAME"].ToString().Trim().Substring(0, 1).ToLower()+row["TABLE_NAME"].ToString().Trim().Substring(1)#> = null;
			string sql = "SELECT * FROM <#= row["TABLE_NAME"].ToString().Trim()#> WHERE <#= ds.Tables[0].Columns[0].ColumnName #> = @<#= ds.Tables[0].Columns[0].ColumnName #>";
			SqlParameter parameter = new SqlParameter("@<#= ds.Tables[0].Columns[0].ColumnName #>", SqlDbType.<#= ds.Tables[0].Columns[0].DataType.Name #><# if(ds.Tables[0].Columns[0].MaxLength != -1){#>, <#= ds.Tables[0].Columns[0].MaxLength #><#}#>);
			parameter.Value = <#= ds.Tables[0].Columns[0].ColumnName.Substring(0,1).ToLower()+ds.Tables[0].Columns[0].ColumnName.Substring(1) #>;
			using(SqlDataReader reader = DBHelper.ExecuteReader(sql, parameter))
			{
				if(reader.Read())
				{
					<#= row["TABLE_NAME"].ToString().Trim().Substring(0, 1).ToLower()+row["TABLE_NAME"].ToString().Trim().Substring(1)#> = new <#= row["TABLE_NAME"].ToString().Trim()#>();
<#for(int i=0;i<ds.Tables[0].Columns.Count; i++){#>					<#= row["TABLE_NAME"].ToString().Trim().Substring(0, 1).ToLower()+row["TABLE_NAME"].ToString().Trim().Substring(1)#>.<#= ds.Tables[0].Columns[i].ColumnName #> = Convert.To<#= ds.Tables[0].Columns[i].DataType.Name #>(reader["<#= ds.Tables[0].Columns[i].ColumnName #>"]);
<#}#>
				}
			}
			return <#= row["TABLE_NAME"].ToString().Trim().Substring(0, 1).ToLower()+row["TABLE_NAME"].ToString().Trim().Substring(1)#>;
		}


		public IList<<#= row["TABLE_NAME"].ToString().Trim()#>> GetAll<#= row["TABLE_NAME"].ToString().Trim()#>()
		{
			IList<<#= row["TABLE_NAME"].ToString().Trim()#>> list<#= row["TABLE_NAME"].ToString().Trim()#> = new List<<#= row["TABLE_NAME"].ToString().Trim()#>>();
			string sql = "SELECT * FROM <#= row["TABLE_NAME"].ToString().Trim()#>";
			using(SqlDataReader reader = DBHelper.ExecuteReader(sql))
			{
				while(reader.Read())
				{
					<#= row["TABLE_NAME"].ToString().Trim()#> <#= row["TABLE_NAME"].ToString().Trim().Substring(0, 1).ToLower()+row["TABLE_NAME"].ToString().Trim().Substring(1)#> = new <#= row["TABLE_NAME"].ToString().Trim()#>();
<#for(int i=0;i<ds.Tables[0].Columns.Count; i++){#>					<#= row["TABLE_NAME"].ToString().Trim().Substring(0, 1).ToLower()+row["TABLE_NAME"].ToString().Trim().Substring(1)#>.<#= ds.Tables[0].Columns[i].ColumnName #> = Convert.To<#= ds.Tables[0].Columns[i].DataType.Name #>(reader["<#= ds.Tables[0].Columns[i].ColumnName #>"]);
<#}#>
					list<#= row["TABLE_NAME"].ToString().Trim()#>.Add(<#= row["TABLE_NAME"].ToString().Trim().Substring(0, 1).ToLower()+row["TABLE_NAME"].ToString().Trim().Substring(1)#>);
				}
			}
			return list<#= row["TABLE_NAME"].ToString().Trim()#>;
		}



	}
}
<# 
manager.EndBlock(); 
}
manager.Process(true); #>